; This is a standard "ini" file. Lines that begin with a semi-colon
; are comments and will not be parsed. Leaving an option blank (with
; nothing after the =) is the same as commenting it out.
;
; This file is divided into sections. Each section is a backup set.
; Each section starts with the name of the backup set in [square]
; brackets, and the values under that section header apply only to
; that section. The name in the square brackets must only contain
; a-z, A-Z, 0-9, periods (.), dashes (-) and underscores (_), but
; so long as you follow those rules you can name your sets however
; you like. Backup set names must be unique (you cannot have two
; backup sets that share the same name) and you cannot call any of
; your backup sets "defaults" (see next paragraph).
;
; There is one special set, [defaults], which contains values that
; will be used by any backup set that doesn't specify it's own
; values. For example, if you want all the backup sets to use the
; same access_id and secret_key (this is probably true) you can
; place them once in the [defaults] section and then you don't need
; to specify them for every backup set. You can still, however,
; override one or more backup sets to use different ids/keys by
; placing an access_id and/or secret_key in one of the sections.
; Any variables in the [defaults] example below can be copied into
; any of the backup sets.
;
; This file contains examples of all supported backup set types,
; you can comment or uncomment them as you require, or add your
; own. You can have multiple backup sets for a single type, so 
; long as they have different names.
;
; Currently supported types are "files" and "mysql". Each has their
; own required variables. See below for examples.


; ------------------------------------------------------------------
; Defaults section
;
[defaults]

; An AWS access id and secret key that have access to read/write/delete
; files in the specified S3 bucket.
access_id = 
secret_key = 

; Bucket names can contain no spaces, slashes, etc. It's the subdomain
; name your bucket can be accessed at.
;
; WARNING: DO NOT use this bucket for anything other than backups
; created by this script! This script will prune (delete) ALL files
; contained in this bucket, regardless of how they were uploaded.
; Obviously if you're keeping other files there this would be VERY 
; BAD! Just create a new bucket for use by this script and you'll be
; fine.
bucket_name = 

; If you wish to upload your files to a "directory" in your s3 bucket
; you can use this prefix to do that. For example, if you set this
; variable to be "backups/" then all your backup files will begin
; with backups/ (eg: backups/DATETIME/BACKUPSET/...)
; DO NOT INCLUDE A / AT THE START! (this causes problems with S3)
;s3_file_prefix = 

; If you're backing up large sets of files or very large databases,
; your /tmp directory may not be large enough to hold the gzip/tar 
; file before it's uploaded. In this case you should change this
; value to a location with more space.
;temp_dir = /tmp


; ------------------------------------------------------------------
; Sample Files Section
; Use a "files" type backup to backup individual files or directories.
;
;[sample-files-backup]
;
;type = files

; The files type backup requires a path to the location to backup.
; This should be an absolute path (starting at /) and can be either
; a single file or a directory of files.
;path = /home/root/

; ------------------------------------------------------------------
; Another Sample Files Section
; You can create multiple backup sets of a single type to backup
; different files/directories or databases. You just have to make
; sure each backup set has a unique name.
;
;[another-files-backup]
;
;type = files
;path = /var/log/httpd/
;
; You can specify backup set retention levels, for example if you
; want to keep all log files for 1 week, then weekly for 6 weeks,
; then monthly for a year, then yearly for 10 years, you would
; use the following:
;retain_days = 7
;retain_weeks = 6
;retain_months = 12
;retain_years = 10

; To specify we keep something forever, use zero (0). For example,
; to keep all backups forever, use retain_days = 0
;retain_days = 0

; Or to keep daily backups for a month, and monthly backups forever,
; you could use:
;retain_days = 30
;retain_months = 0

; ------------------------------------------------------------------
; Sample MySQL Section
; Use a "mysql" type backup to backup individual databases or all
; mysql databases on the server.
;
;[sample-mysql-backup]
;type = mysql

; The MySQL backup type does not require a "path", but has different
; options. None of these are required.

; The host to connect to, by default this is "localhost", or whatever
; is defined in your my.cnf file.
;mysql_host = 

; The port to connect to, by default 3306
;mysql_port = 

; The mysql username to connect with, default will fall back to your
; system username, or whatever is in your my.cnf file.
;mysql_username = 

; The mysql password to use. Default is what's in your my.cnf file.
;mysql_password =

; The database to back up. If this isn't specified, or mysql_all is
; set, all databases will be backed up.
;mysql_database =

; If you set this to anything, all databases will be backed up, 
; instead of only the one specified in mysql_database
;mysql_all = true

